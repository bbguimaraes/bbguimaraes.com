local description <const> = [[Every programmer at one point will encounter the arcane semantics of IEEE-754 floating-point arithmetic.  If for you that point is right now, allow me to list the worst offenders of the principle of least surprise:]]

local content <const> = {
    par [[
Every programmer at one point will encounter the arcane semantics of IEEE-754
floating-point arithmetic.  If for you that point is right now, allow me to
list the worst offenders of the principle of least surprise:
]],
    [[
            <ul>
                <li>
Division by zero is a (semi-)valid operation that returns
<code>±infinity</code>.
                </li>
                <li>
Division <em>of zero</em> by zero returns <code>NaN</code> (not-a-number).
                </li>
                <li>
Even invalid operations are also (semi-)valid operations that return
<code>NaN</code>.
                </li>
                <li>
In what has to be considered the clear winner, despite the items above not
generating an exception by default, an <em>integer</em> division-by-zero will
generate a <em>floating-point exception</em> (unrelated to exceptions in
languages such as C++) in POSIX-compliant operating systems — if it does
generate an exception at all, which is usually the case.
                </li>
            </ul>]],
    par [[
Because of the semantics of integer division, it may be very surprising to the
uninitiated that nonsensical floating-point operations actually "succeed" and
control flow proceeds uninterrupted.  While that might at first sound like a
good thing, <code>NaN</code>s and <code>infinity</code>s quickly spread through
any data that come in contact with them, because they propagate if they appear
in any of the operands of most operations (<code>NaN + 1</code> yields
<code>NaN</code>, <code>infinity + 1</code> yields <code>infinity</code>,
etc.).
]],
    par [[
Take for example the following code that attempts to find the vector of
penetration of a point <code>p</code> in a sphere with center <code>c</code>
and radius <code>r</code> (the precursor to this epopoeia):
]],
    code [[
<b>const</b> <b>auto</b> d = c - p;
<b>if</b>(<b>const</b> <b>auto</b> l2 = dot(d, d); l2 &gt; r2) {
    d *= r / <b>std::sqrt</b>(l2) - <b>1</b>;
    <i>// …</i>
}
]],
    par [[
The code itself is not very interesting other than the fact that if the point
happens to lie exactly on the circle, <code>d</code> will be a vector of length
0 (the conditional was supposed to be "greater <em>or equal</em>").  This is
easily verifiable by observing that the division will equal 1 and the
subtraction, 0.
]],
    par [[
If subsequent operations try to use that length in a division (which of course
they did), <code>NaN</code>s and <code>infinity</code> will very soon appear
and spread quickly <em>without generating an easily identifiable error</em>.
The result is spectacular, but not ideal if one wants a stable simulation:
]],
    image {
        src = "/files/blog/sigfpe.gif",
        alt = "spectacular simulation",
    },
    h2_link { "enter-sigfpe", "Enter <code> SIGFPE</code>" },
    par [[
POSIX platforms have a special signal for arithmetic operation errors:
<code>SIGFPE</code> (short for "floating-point exception").  If integer
division by zero generates a signal, this is the one that is generated.
Because of the aforementioned well-defined rules for IEEE-754 floating-point
arithmetic, however, this signal is not generated by default for the operations
we are interested in.
]],
    par [[
The good news is this can be changed, albeit with a bit of platform-specific
code.  For Linux systems using <code>glibc</code>, there is <a
href="https://linux.die.net/man/3/feenableexcept"><code>feenableexcept</code></a>:
]],
    code [[
feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);
]],
    par [[
This will cause all (IEEE-754) exceptions to send a <code>SIGFPE</code> to the
process.  Crucially, the signal will be delivered at the exact point where the
floating-point operation is performed, yielding either a core dump (the default
signal action for <code>SIGFPE</code>) or a precise breakpoint in the debugger.
]],
    par [[
There is an implementation on the internet for
<a href="http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c">OS X</a>
and the <a href="https://en.cppreference.com/w/cpp/numeric/fenv#Notes">cppreference</a>
page mentions a similar solution for Windows, although I have not tested any of
those.
]],
    par [[
Even the raw <code>x86</code> assembly instructions that actually set the FPU
and SSE modes are very simple, v. the
<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/x86_64/fpu/feenablxcpt.c;hb=HEAD"><code>glibc</code> implementation</a>
(slightly formatted):
]],
    code [[
<b>int</b> feenableexcept (<b>int</b> excepts) {
    <b>unsigned</b> <b>short</b> <b>int</b> new_exc, old_exc;
    <b>unsigned</b> <b>int</b> new;
    excepts &amp;= FE_ALL_EXCEPT;
    <i>/* Get the current control word of the x87 FPU. */</i>
    <b>__asm__</b> (<b>"fstcw %0"</b> : <b>"=m"</b> (*&amp;new_exc));
    old_exc = (~new_exc) &amp; FE_ALL_EXCEPT;
    new_exc &amp;= ~excepts;
    <b>__asm__</b> (<b>"fldcw %0" </b>: : <b>"m"</b> (*&amp;new_exc));
    <i>/* And now the same for the SSE MXCSR register. */</i>
    <b>__asm__</b> (<b>"stmxcsr %0" </b>: <b>"=m"</b> (*&amp;new));
    <i>/* The SSE exception masks are shifted by 7 bits. */</i>
    new &amp;= ~(excepts &lt;&lt; 7);
    <b>__asm__</b> (<b>"ldmxcsr %0"</b> : : <b>"m"</b> (*&amp;new));
    <b>return</b> old_exc;
}
]],
    h2_link { "bonus", "Bonus" },
    par [[
For bonus points, this can be put in a shared library so that FPE signals can
be enabled dynamically by either loading or <code>LD_PRELOAD</code>ing the
library (modulo static initialization order) without recompiling the program:
]],
    code [[
$ cat fpe.cpp
<b>#include</b> <b>&lt;fenv.h&gt;</b>
<b>static</b> <b>int</b> _=[]{<b>return</b> feenableexcept(FE_DIVBYZERO|FE_INVALID|FE_OVERFLOW);}();
$ g++ -c -fpic fpe.cpp &amp;&amp; g++ -shared -o fpe.so fpe.o
$ cat test.cpp
<b>int</b> main() { <b>return</b> <b>1.0f</b> / <b>0.0f</b>; }
$ g++ -o test test.cpp
$ ./test
$ LD_PRELOAD=./fpe.so ./test
Floating point exception (core dumped)
]],
    par [[
<i>(credits for
<a href="https://www.dursi.ca/post/stopping-your-program-at-the-first-nan.html">Jonathan Dursi</a>
for the blog post that got me started with this rabbit hole)</i>
]],
}

return {
    title = "<code>SIGFPE</code>",
    short_title  = "SIGFPE",
    date = { "1590011812", "2020-05-20T21:56:52" },
    tags = {
        "assembly", "c", "debugging", "linux", "math", "programming", "unix",
    },
    description = description,
    content = content,
}
